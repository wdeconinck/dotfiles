if [[ $- =~ "i" ]]; then
  echo "starting $HOME/.bashrc"
fi

# reload this profile
function reload
{
  echo 'reloading'
  if [ -f ~/.bash_profile ]; then
    . ~/.bash_profile
  else
    echo 'sourcing bashrc'
    . ~/.bashrc
  fi
}

alias profile="edit $HOME/.bashrc"

############################################################################
# SOURCES
############################################################################

# if [ -f ~/.inputrc ]; then
#     . ~/.inputrc
# fi
# 
if [ -f ~/.bash_extra ]; then
    . ~/.bash_extra
fi

export PYTHONSTARTUP=~/.pystartup.py

############################################################################
# PATH
############################################################################

# user local path
export PATH=/usr/local/bin:$PATH

############################################################################
# FUNCTIONS
############################################################################

#install homebrew
function install-homebrew
{
     /usr/bin/ruby -e "$(/usr/bin/curl -fksSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)"
}

# build & run target
function br  
{ 
    make -j2 $1 && mpirun -np 1 $1 
}
function br2 
{ 
    make -j2 $1 && mpirun -np 2 $1 
}
function bvr  
{ 
    make -j2 $1 && valgrind --leak-check=yes mpirun --dsymutil=yes -np 1 $1
}
function ssh-setup
{ 
    cat ~/.ssh/id_rsa.pub | ssh $1 'mkdir -p ~/.ssh; cat - >> ~/.ssh/authorized_keys' 
}

command_exists () {
    type "$1" &> /dev/null ;
}

# credit: http://nparikh.org/notes/zshrc.txt
# Usage: smartextract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is Mac OS X-specific.
extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

encrypt() {
  if [ $# -ne 2 ]
  then
    echo "Usage: encrypt {input} {encrypted}"
  else
    echo "Enter encryption password: "
    stty_orig=`stty -g` # save original terminal setting.
    stty -echo          # turn-off echoing.
    read passwd         # read the password
    stty $stty_orig     # restore terminal setting.
    openssl des3 -in $1 -out $2 -pass pass:$passwd
  fi
}
decrypt() {
  if [ $# -ne 2 ]
  then
    echo "Usage: decrypt {encrypted} {output}"
  else
    echo "Enter encryption password: "
    stty_orig=`stty -g` # save original terminal setting.
    stty -echo          # turn-off echoing.
    read passwd         # read the password
    stty $stty_orig     # restore terminal setting.
    openssl des3 -d -in $1 -out $2 -pass pass:$passwd
  fi
}
passwords() {
  PWEN=~/Dropbox/.passwords.encrypted
  PWDE=~/passwords.txt
  if test $# -eq 0; then
    decrypt $PWEN $PWDE
    less $PWDE
    rm $PWDE
  elif [ "$1" == "--edit" ]; then
    echo "Enter encryption password: "
    stty_orig=`stty -g` # save original terminal setting.
    stty -echo          # turn-off echoing.
    read passwd         # read the password
    stty $stty_orig     # restore terminal setting.
    openssl des3 -d -in $PWEN -out $PWDE -pass pass:$passwd 
    mate -w $PWDE
    openssl des3 -in $PWDE -out $PWEN -pass pass:$passwd 
    rm $PWDE
  else
    echo Usage: passwords [--edit]
  fi
}
# quicklook a document
ql() {
	qlmanage -p "$@" >& /dev/null &
}

function ssh-tunnel-on
{
	ssh -D 8080 -f -C -q -N $1
	networksetup -setsocksfirewallproxy Wi-Fi localhost 8080
	networksetup -setsocksfirewallproxystate Wi-Fi on
}

function ssh-tunnel-off
{
	# kill $SSH_TUNNEL
	networksetup -setsocksfirewallproxystate Wi-Fi off
}

#rsync with progress and compression
alias rsync="rsync -avz --progress "

# gnuplot shortcut
alias gp=gnuplot

# ipython with console, and pylab, good matlab replacement
alias pylab='ipython qtconsole --pylab=inline'

# other alias
alias wifi='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s'
alias path='echo $PATH'
alias lib='echo $DYLD_LIBRARY_PATH'
alias eject="drutil eject"  # or "drutil tray open"
alias edit='open -e'
# git alias uses hub instead of git
#if command_exists hub ; then
#    alias git=hub
#fi
source ~/.git-completion.bash
#git enhanced
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWSTASHSTATE=1

# cd shortcuts
alias cd..="cd .."
alias back="cd -"
alias ..="cd .."
alias ...="cd ../.."

# Colored output in ls
# ls (see http://www.geekology.co.za/blog/2009/04/enabling-bash-terminal-directory-file-color-highlighting-mac-os-x/)
export CLICOLOR=true
export LSCOLORS=ExBxFxDxcxegedabagacad

if [[ $(uname) == Darwin ]]; then
    alias ls="command ls -pG"
elif [[ $(uname) == Linux ]]; then
    alias ls="command ls --color=auto -p"
fi

alias ll="ls -ghp"      # list view
alias lsort="ls -gShp"  # sorted list view, largest size at top
alias la="ls -Ap"       # show invisibles
alias lr="ll -t | head -5" # show 5 most recent files

# alias to print a bar on screen
alias bar='echo -e "\\033[1;31;40m============================================================\\033[m"'
alias lbar='echo -e "\\033[1;31;40m========================================================================================================================\\033[m"'

# show file and folder sizes
alias duf='du -kd 1 | sort -nr | while read size fname; do for unit in k M G T P E Z Y; do if [ $size -lt 1024 ]; then echo -e "${size}${unit}\t${fname}"; break; fi; size=$((size/1024)); done; done'

# ssh hosts
alias hpacf="ssh hpacf.utias.utoronto.ca"
alias oddjob="ssh oddjob.utias.utoronto.ca"
alias sci="ssh login.scinet.utoronto.ca"
alias lazycat="ssh lazycat.zapto.org"
alias stro014="ssh stro014.vub.ac.be"

# Undo a `git push`
alias undopush="git push -f origin HEAD^:master"

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en1"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias whois="whois -h whois-servers.net"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# Start an HTTP server from a directory
alias server="open http://localhost:8080/ && python -m SimpleHTTPServer 8080"

# Canonical hex dump; some systems have this symlinked
type -t hd > /dev/null || alias hd="hexdump -C"

# OS X has no `md5sum`, so use `md5` as a fallback
type -t md5sum > /dev/null || alias md5sum="md5"

# Trim new lines and copy to clipboard
alias c="tr -d '\n' | pbcopy"

# Recursively delete `.DS_Store` files
alias cleanup="find . -name '*.DS_Store' -type f -ls -delete"

# Shortcuts
alias g="git"

# File size
alias fs="stat -f \"%z bytes\""

# ROT13-encode text. Works for decoding, too! ;)
alias rot13='tr a-zA-Z n-za-mN-ZA-M'

# Empty the Trash
alias emptytrash="rm -rfv ~/.Trash"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.Finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.Finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# Disable Spotlight
alias spotoff="sudo mdutil -a -i off"
# Enable Spotlight
alias spoton="sudo mdutil -a -i on"

# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it
alias plistbuddy="/usr/libexec/PlistBuddy"

# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do alias "$method"="lwp-request -m '$method'"; done

# Stuff I never really use but cannot delete either because of http://xkcd.com/530/
alias stfu="osascript -e 'set volume output muted true'"
alias pumpitup="osascript -e 'set volume 10'"
alias hax="growlnotify -a 'Activity Monitor' 'System error' -m 'WTF R U DOIN'"

# grep command
export GREP_OPTIONS="--colour=auto"

#################################3
## File used for defining $PS1

bash_prompt_command() {
# How many characters of the $PWD should be kept
local pwdmaxlen=132
# Indicate that there has been dir truncation
local trunc_symbol=".."
local dir=${PWD##*/}
pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
NEW_PWD=${PWD/#$HOME/\~}
local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
if [ ${pwdoffset} -gt "0" ]
then
    NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
    NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
fi
}

bash_prompt() {
local NONE="\[\033[0m\]"    # unsets color to term's fg color

# regular colors
local K="\[\033[0;30m\]"    # black
local R="\[\033[0;31m\]"    # red
local G="\[\033[0;32m\]"    # green
local Y="\[\033[0;33m\]"    # yellow
local B="\[\033[0;34m\]"    # blue
local M="\[\033[0;35m\]"    # magenta
local C="\[\033[0;36m\]"    # cyan
local W="\[\033[0;37m\]"    # white

# empahsized (bolded) colors
local EMK="\[\033[1;30m\]"
local EMR="\[\033[1;31m\]"
local EMG="\[\033[1;32m\]"
local EMY="\[\033[1;33m\]"
local EMB="\[\033[1;34m\]"
local EMM="\[\033[1;35m\]"
local EMC="\[\033[1;36m\]"
local EMW="\[\033[1;37m\]"

# background colors
local BGK="\[\033[40m\]"
local BGR="\[\033[41m\]"
local BGG="\[\033[42m\]"
local BGY="\[\033[43m\]"
local BGB="\[\033[44m\]"
local BGM="\[\033[45m\]"
local BGC="\[\033[46m\]"
local BGW="\[\033[47m\]"

local BEG="\[\033(0\]"   # Begin special character
local END="\[\033(B\]"   # End   special character

case $TERM in
xterm* | aterm | rxvt | screen )
XTITLE="\[\e]0;\w\a\]" ;;
* )
XTITLE="" ;;
esac
export PS1="$XTITLE""\n${NONE}${BEG}l${END}(${EMC}\u@\h${NONE})${BEG}q${END}${R}\j${NONE}${BEG}q${END}[${EMG}\${NEW_PWD}${NONE}]${NONE}\n${BEG}m${END}${BEG}q${END}${BEG}q${END}(${B}\A${NONE})\$(__git_ps1 '${BEG}q${END}[')${Y}\$(__git_ps1 '%s')${NONE}\$(__git_ps1 ']')${NONE} $ ${NONE}"
}

PROMPT_COMMAND=bash_prompt_command
bash_prompt
unset bash_prompt

test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

if [ -f ~/.user_bashrc ]; then
    source ~/.user_bashrc
fi
